module Curve25519_mladder

use import fe25519.Fe25519
use import fe25519.Fe25519_invert

use import int.Int
use import int.EuclideanDivision
use import bv.Pow2int
use import bv.BV8
use import avrmodel.AVRint
use import ref.Ref

use import curve25519.Montgomery as M
use import curve25519.Curve25519

(*
static void mladder(fe25519 *xr, fe25519 *zr, const unsigned char s[32])
{
  fe25519 work[5];
  unsigned char bit, prevbit=0;
  unsigned char swap;
  signed char j;
  signed char i;

  work[0] = *xr;
  fe25519_setone(work+1);
  fe25519_setzero(work+2);
  work[3] = *xr;
  fe25519_setone(work+4);

  j = 6;
  for(i=31;i>=0;i--)
  {
    while(j >= 0)
    {
      bit = 1&(s[i]>>j);
      swap = bit ^ prevbit;
      prevbit = bit;
      work_cswap(work,swap);
      ladderstep(work);
      j -= 1;
    }
    j = 7;
  }
  *xr = work[1];
  *zr = work[2];
}
*)

let ghost div_mult (x d1 d2: int)
  requires { d1 > 0 /\ d2 > 0 }
  ensures { div x (d1*d2) = div (div x d1) d2 }
= ()

(* it goes too far to formalize and proof an equivalence between repeated point addition and double-and-add methods,
   as that would require a more extensive theory of elliptic curves; however here we can suffice with a simple definition
   of the Montgomery ladder which computes a scalar multiple *)

predicate (=~~=) (pq pq': (ratio,ratio)) =
  let ((p,q),(p',q')) = (pq,pq') in p =~= p' /\ q =~= q'

predicate (~~) (pq pq': (ratio,ratio)) =
  let ((p,q),(p',q')) = (pq,pq') in p ~ p' /\ q ~ q'

function ladder (n: int) (p: ratio): (ratio, ratio)

(* note: we didn't find it necessary to define the inverse at the spec level, so this too has to return a ratio *)
function scale (n: int) (m: int): ratio = 
  let (r,_) = ladder n {x=m; z=1} in r

(* axiomatic definitions *)
axiom ladder_0:
  forall p.
    ladder 0 p = ({x=1; z=0}, p)

axiom ladder_even:
  forall p, n. n > 0 ->
    let (r0,r1) = ladder n p in
    ladder (2*n) p = (double r0, add r1 r0 p)

axiom ladder_odd:
  forall p, n. n >= 0 ->
    let (r0,r1) = ladder n p in
    ladder (2*n+1) p = (add r1 r0 p, double r1)

lemma monty_add_commutes:
  forall a b c.
    M.add a b c = M.add b a c

(* cannot use =~= here, since Why3 rewrites that a bit eagerly *)
lemma eqv_monty_double:
  forall p p'. 
    p.x === p'.x /\ p.z === p'.z ->
    let (d,d') = (M.double p, M.double p') in
    d.x === d'.x /\ d.z === d'.z
  by
    sqr(sqr p.x - sqr p.z) === sqr(sqr p'.x - sqr p'.z) /\
    p.x*p.z === p'.x*p'.z &&
    sqr p.x + a*p.x*p.z + sqr p.z === sqr p'.x + a*p'.x*p'.z + sqr p'.z
   
lemma eqv_monty_add:
  forall p0 p0' p1 p1' p.
    p0.x === p0'.x /\ p0.z === p0'.z ->
    p1.x === p1'.x /\ p1.z === p1'.z ->
    let (d,d') = (M.add p0 p1 p, M.add p0' p1' p) in
    d.x === d'.x /\ d.z === d'.z
  by
    sqr (p0.x*p1.x - p0.z*p1.z) === sqr (p0'.x*p1'.x - p0'.z*p1'.z) &&
    p.z*sqr (p0.x*p1.x - p0.z*p1.z) === p.z*sqr (p0'.x*p1'.x - p0'.z*p1'.z)  /\
    sqr (p0.x*p1.z - p0.z*p1.x) === sqr (p0'.x*p1'.z - p0'.z*p1'.x) &&
    p.x*sqr (p0.x*p1.z - p0.z*p1.x) === p.x*sqr (p0'.x*p1'.z - p0'.z*p1'.x)

lemma mask_shift:
  forall w, i. 0 <= i < 8 ->
    (if nth w i then one else zeros) = bw_and (BV8.of_int 1) (BV8.lsr w i)

let lemma bit_select (i j: int) (s: address_space)
  requires { 0 <= i < 32 }
  requires { 0 <= j < 8 }
  ensures { mod (div ?s (pow2 (8*i+j))) 2 = 1 <-> nth (BV8.of_int s[i]) j }
= let ar_i = read_byte s i in
  uint_split s 0 32 i;
  uint_bound s 0 i;
  assert { div (AVRint.uint i s 0) (pow2 (8*i)) = 0 };
  assert { div ?s (pow2 (8*i)) = AVRint.uint (32-i) s i };
  uint_bound s 0 32;
  div_mult ?s (pow2 (8*i)) (pow2 j);
  assert { div ?s (pow2 (8*i+j)) = div ?s (pow2 (8*i)*pow2 j) 
                                 = div (AVRint.uint (32-i) s i) (pow2 j) };
  uint_split s i (32-i) 1;
  assert { pow2 8 = pow2 j*pow2 (8-j) };
  let force_div_mult (a b: int)
    ensures { div (pow2 j*a + b) (pow2 j) = a + div b (pow2 j) } = ()
  in
  force_div_mult (pow2 (8-j)*AVRint.uint (31-i) s (i+1)) (read_byte s i);
  assert { div (AVRint.uint (32-i) s i) (pow2 j) =
           div (s[i] + pow2 8*AVRint.uint (31-i) s (i+1)) (pow2 j) =
           div (pow2 j*(pow2 (8-j)*AVRint.uint (31-i) s (i+1)) + s[i]) (pow2 j) =
           pow2 (8-j)*AVRint.uint (31-i) s (i+1) + div s[i] (pow2 j) =
           div s[i] (pow2 j) + 2*pow2 (8-j-1)*AVRint.uint (31-i) s (i+1) };
  assert { mod (div (AVRint.uint (32-i) s i) (pow2 j)) 2 =
           mod (div s[i] (pow2 j)) 2 };
  ar_nth_bv_nth_equivalent ar_i j

let ghost pow_squeeze (n i: int)
  requires { i >= 0 }
  requires { pow2 i <= n < pow2 (i+1) }
  ensures { div n (pow2 i) = 1 }
= if div n (pow2 i) > 1 then
    assert { n >= pow2 i*div n (pow2 i) >= pow2 i*2 }

(* NOTE: this function should also "work" for ?s less than 2^254; however,
   since that performs the ladderstep a number of times on the infinity point, the "=~=" relationship
   is not preserved (since add p inf p =~= p does not hold), and we would need to run the proofs using "~",
   which is harder. and this is not necessary, because of the Curve25519 clamping function.
 *)

let mladder (xr zr: address_space) (s: address_space)
  requires { __static_init _121666 }
  requires { pow2 254 <= ?s < pow2 255 }
  requires { mod ?s 2 = 0 }                          (* otherwise the order of the state is still swapped *)
  ensures { ??(xr,zr) =~= scale ?s (old ?xr) }
  writes { xr, zr }
= let (work0,work1,work2,work3,work4) = (!(mk_space()),!(mk_space()), !(mk_space()), !(mk_space()), !(mk_space())) in
  let j = ref (any int) in
  let prevbit = ref (BV8.zeros) in

  __fe25519_assign work0 xr;
  fe25519_setone(work1);
  fe25519_setzero(work2);
  __fe25519_assign work3 xr;
  fe25519_setone(work4);

  j := 6;
  assert { div ?s (pow2 255) = 0 };
  for i = 31 downto 0 do
    invariant { !j = if i = 31 then 6 else 7 }
    invariant { let shift = pow2 (8*i + !j+1) in
                let (w0,w1) = (if !prevbit = zeros then (??(work1,work2), ??(work3,work4)) else (??(work3,work4),??(work1,work2))) in
                let (r0,r1) = ladder (div ?s shift) { x=(?work0); z=1 } in
                w0 =~= r0 /\ w1 =~= r1 /\ BV8.t'int !prevbit = mod (div ?s shift) 2 }
    invariant { div ?s (pow2 (8*i + !j+1)) = 0 -> i=31 /\ !j = 6 }
    invariant { forall i. 0 <= work1[i] <= 255 } invariant { forall i. 0 <= work2[i] <= 255 } (* boilerplate *)
    invariant { forall i. 0 <= work3[i] <= 255 } invariant { forall i. 0 <= work4[i] <= 255 }
'B:
    while !j >= 0 do
      invariant { let shift = pow2 (8*i + !j+1) in
                  let (w0,w1) = (if !prevbit = zeros then (??(work1,work2), ??(work3,work4)) else (??(work3,work4),??(work1,work2))) in
                  let (r0,r1) = ladder (div ?s shift) { x=(?work0); z=1 } in
                  w0 =~= r0 /\ w1 =~= r1 /\ BV8.t'int !prevbit = mod (div ?s shift) 2 }
      invariant { div ?s (pow2 (8*i + !j+1)) = 0 -> i=31 /\ !j = 6 }
      variant { !j+1 }
      invariant { -1 <= !j <= at !j 'B }
      invariant { forall i. 0 <= work1[i] <= 255 } invariant { forall i. 0 <= work2[i] <= 255 } (* boilerplate *)
      invariant { forall i. 0 <= work3[i] <= 255 } invariant { forall i. 0 <= work4[i] <= 255 }

      let ghost p = { x = ?work0; z = 1 } in
      let ghost shift = pow2 (8*i + !j+1) in
      assert { div ?s shift >= 0 };


      let bit = bw_and (BV8.of_int 1) (BV8.lsr (read_bv8 s i) !j) in
      assert { bit = (if nth (BV8.of_int (s[i])) (!j) then one else zeros) };
'B:
      ghost bit_select i (!j) s;
      assert { BV8.t'int bit = mod (div ?s (pow2 (8*i + !j))) 2 };
      let swap = bw_xor bit !prevbit in
      prevbit := bit;
      work_cswap work0 work1 work2 work3 work4 (BV8.t'int swap);
      ladderstep work0 work1 work2 work3 work4;
      j := !j - 1;

assert { 
      let (r0,r1) = at(if !prevbit = zeros then (??(work1,work2), ??(work3,work4)) else (??(work3,work4),??(work1,work2)))'B in
      let (r0',r1') = (if !prevbit = zeros then (??(work1,work2), ??(work3,work4)) else (??(work3,work4),??(work1,work2))) in
      (bit = zeros -> (r0',r1') =~~= (double r0, add r1 r0 p)) /\
      (bit = one   -> (r0',r1') =~~= (add r1 r0 p, double r1))
};
      ghost pow_squeeze (?s) 254;
assert {
      div ?s shift = 0 -> swap = bit = one
};
assert {
      let n = div ?s shift in
      let (r0,r1) = at(if !prevbit = zeros then (??(work1,work2), ??(work3,work4)) else (??(work3,work4),??(work1,work2)))'B in
      let (p0,p1) = ladder n p in
        r0 =~= p0 && r1 =~= p1 && double r0 =~= double p0 && double r1 =~= double p1 && add r1 r0 p =~= add p1 p0 p
};
assert {
      let n = div ?s shift in
      forall r0 r1.  ladder n p = (r0,r1) ->
      (n > 0 -> ladder (2*n) p = (double r0, add r1 r0 p) /\ 
                ladder (2*n+1) p = (add r1 r0 p, double r1)) /\
      (n = 0 -> ladder (2*n+1) p = (add r1 r0 p, double r1) by 
          ladder 1 p = (add r1 r0 p, double r1) by
          r0 = {x=1; z=0} /\ r1 = p)
};

ghost div_mult (?s) (pow2 (8*i + !j + 1)) 2;
assert { 
      let b = (at (pow2 (8*i + !j))'B) in
      let n = div ?s shift in
      let w = div ?s b in
      (bit = zeros -> 2*n = div ?s b) /\
      (bit = one   -> 2*n+1 = div ?s b)
      by (w = BV8.t'int bit + 2*div w 2 /\ div ?s (2*b) = div (div ?s b) 2 )
};

    done;
    j := 7;

  done;
  __fe25519_assign xr work1;
  __fe25519_assign zr work2

end

module Curve25519_crypto

use import fe25519.Fe25519
use import fe25519.Fe25519_invert

use import int.Int
use import int.EuclideanDivision
use import bv.Pow2int
use import bv.BV8
use import avrmodel.AVRint
use import ref.Ref

use import curve25519.Montgomery
use import curve25519.Curve25519
use import Curve25519_mladder

(*
int crypto_scalarmult_curve25519(
    unsigned char *r,
    const unsigned char *s,
    const unsigned char *p
    )
{
  unsigned char e[32];
  unsigned char i;
  for(i=0;i<32;i++) e[i] = s[i];
  e[0] &= 248;
  e[31] &= 127;
  e[31] |= 64;

  fe25519 t;
  fe25519 z;
  fe25519_unpack(&t, p);
  mladder(&t, &z, e);
  fe25519_invert(&z, &z);
  fe25519_mul(&t, &t, &z);
  fe25519_pack(r, &t);
  return 0;
}
*)

predicate (==~) (x:int) (xz: ratio) =
  xz ~ {x=x; z=1}

lemma semi_eq_trans:
  forall a b c. a === b -> c.x === b*c.z -> c.x === a*c.z

function clamp (x: int): int
  = mod x (pow2 254) + pow2 254 - mod x 8

let lemma clamp_limits (x: int)
  ensures { pow2 254 <= clamp x < pow2 255 /\ mod (clamp x) 8 = 0 }
= assert { pow2 254 = pow2 251*8 }

use import number.Prime

(* the one axiom in our system *)
axiom p_def:
  prime p25519

clone fermat.Fermat
  with constant p = p25519, lemma p_prime

use import fe25519.Fe25519

constant infty: ratio = {x=1;z=0}

let crypto_scalarmult_curve25519 (r s p: address_space)
  requires { __static_init _121666 }
  ensures { uint 32 r = mod (uint 32 r) p25519 }
  ensures { let xp   = mod (uint 32 p) (pow2 255) in
            let mult = scale (clamp (uint 32 s)) xp in
            if mult ~ infty then
              uint 32 r === 0
            else
              uint 32 r ==~ mult }
  writes { r }
= let e = !(mk_space()) in
  abstract ensures { ?e = ?s }
  for i = 0 to 31 do
    invariant { forall i. 0 <= e[i] <= 255 }
    invariant { forall j. 0 <= j < i -> e[j] = s[j] }
    set_byte e i (read_byte s i)
  done;
  end;

  abstract ensures { uint 32 e = clamp(old (uint 32 e)) }
  ghost uint_split e 0 32 1;
  ghost uint_split e 0 32 31;
  ghost uint_bound e 0 31;
  ghost div_mult ?e (pow2 248) 64;
'A:
  set_bv8 e 0 (bw_and (read_bv8 e 0) (BV8.of_int 248));
  assert { e[0] = at(e[0] - mod e[0] 8)'A by
           e[0] = BV8.t'int (BV8.lsl (BV8.lsr (BV8.of_int (at e[0]'A)) 3) 3)
                = 8*BV8.t'int (BV8.lsr (BV8.of_int (at e[0]'A)) 3)
                = at(8*div e[0] 8)'A };
'B:
  set_bv8 e 31 (bw_and (read_bv8 e 31) (BV8.of_int 127));
  assert { e[31] = at(mod e[31] 128) 'B };
'C:
  set_bv8 e 31 (bw_or (read_bv8 e 31) (BV8.of_int 64));
  assert { e[31] = 64 + at(mod e[31] 64)'B by
              (at e[31] 'C >= 64 -> e[31] = at e[31]'C) /\
              (at e[31] 'C < 64 -> e[31] = 64 + at e[31]'C) };

  assert { at ?e 'B = at (?e - mod e[0] 8)'A };
  assert { at (mod ?e 256)'A = 
           at (mod (e[0] + pow2 8*AVRint.uint 31 e 1) 256)'A =
           at (mod e[0] 256)'A };
  assert { at (mod (mod ?e 256) 8)'A = at (mod ?e 8)'A };
  assert { at ?e 'B = at (?e - mod ?e 8)'A };

  assert { e[31] = at (e[31] - (div e[31] 64-1)*64)'B };

  assert { ?e = at(?e - (div e[31] 64-1)*pow2 248*64)'B };
  assert { pow2 248*pow2 6 = pow2 (248+6) };
  assert { ?e = at(?e - mod ?e 8 - (div e[31] 64-1)*pow2 254)'A };

  assert { pow2 248*at e[31] 'A = at (?e - AVRint.uint 31 e 0)'A };
  assert { at e[31] 'A = at (div ?e (pow2 248))'A };
  assert { at(div(div ?e (pow2 248)) 64)'A = at(div e[31] 64)'A };
  assert { ?e = at(?e - mod ?e 8 - (div ?e (pow2 254)-1)*pow2 254)'A };
  end;

  let t = mk_space() in
  let z = mk_space() in
  fe25519_unpack (!t) p;
  mladder (!t) (!z) e;
'D:
  fe25519_invert_r !z;
  fe25519_mul_rx !t !z;
  assert { not ?(!z) === 0 -> let r = scale ?e (mod ?p (pow2 255)) in
    ?(!t) * r.z === r.z * ?(!z) * at ?(!t)'D === at (?(!z))'D * ?(!z) * r.x === r.x
    by r.z === at (?(!z))'D };
  fe25519_pack_opt r !t;
  assert { ?r === ?(!t) };
  assert { ?(!z) === 0 -> at ?(!z)'D === 0 && scale (clamp (?s)) (mod ?p (pow2 255)) ~ {x=1;z=0}};
  assert { scale (clamp (?s)) (mod ?p (pow2 255)) ~ {x=1;z=0} -> ?(!z) === 0 && ?(!t) === 0 }

end
