; Authors: Michael Hutter, Peter Schwabe, Marc Schoolderman
; Version: 2020-12-14
; Public domain

  .global bigint_square256
  .type bigint_square256, @function

; #define __FAST__

/*********************************************************
 * sqr128
 *   Z points to the result
 *   Y points to the input
 */
#if defined (__FAST__)
  #define CALLSQR128 sqr128
  .MACRO sqr128
#else
  #define CALLSQR128 RCALL sqr128
  sqr128:
#endif
  ; init zero registers
  CLR R26
  CLR R27

  PUSH R28
  PUSH R29

  ; ============ LOW MULT ============
 
  MUL R2,R3
  MOVW R10,R0

  MOVW R12,R26
  MUL R2,R4
  ADD R11,R0
  ADC R12,R1


  MOVW R14,R26
  MUL R2,R5
  ADD R12,R0
  ADC R13,R1

  MUL R3,R4
  ADD R12,R0
  ADC R13,R1
  ADC R14,R26


  MUL R2,R6
  ADD R13,R0
  ADC R14,R1

  MUL R3,R5
  ADD R13,R0
  ADC R14,R1
  ADC R15,R26


  MOVW R16,R26
  MUL R2,R7
  ADD R14,R0
  ADC R15,R1
  ADC R16,R26

  MUL R3,R6
  ADD R14,R0
  ADC R15,R1
  ADC R16,R26

  MUL R4,R5
  ADD R14,R0
  ADC R15,R1
  ADC R16,R26


  MUL R2,R8
  ADD R15,R0
  ADC R16,R1
  ADC R17,R26

  MUL R3,R7
  ADD R15,R0
  ADC R16,R1
  ADC R17,R26

  MUL R4,R6
  ADD R15,R0
  ADC R16,R1
  ADC R17,R26


  MOVW R18,R26
  MUL R2,R9
  ADD R16,R0
  ADC R17,R1
  ADC R18,R26

  MUL R3,R8
  ADD R16,R0
  ADC R17,R1
  ADC R18,R26

  MUL R4,R7
  ADD R16,R0
  ADC R17,R1
  ADC R18,R26

  MUL R5,R6
  ADD R16,R0
  ADC R17,R1
  ADC R18,R26

  ROL R10
  ROL R11
  ROL R12
  ROL R13
  ROL R14
  ROL R15
  ROL R16
  SBC R25,R25 ; remember shift carry

  MUL R2,R2
  STD Z+0,R0
  MOV R2,R1
  MUL R3,R3
  MOVW R20,R0
  MUL R4,R4
  MOVW R22,R0
  MUL R5,R5

  ADD R10,R2
  STD Z+1,R10
  ADC R11,R20
  STD Z+2,R11
  ADC R12,R21
  STD Z+3,R12
  ADC R13,R22
  STD Z+4,R13
  ADC R14,R23
  STD Z+5,R14
  ADC R15,R0
  STD Z+6,R15
  ADC R16,R1
  STD Z+7,R16

  SBC R25,R26 ; merge carry with previous carry

  MUL R3,R9
  ADD R17,R0
  ADC R18,R1
  ADC R19,R26

  MUL R4,R8
  ADD R17,R0
  ADC R18,R1
  ADC R19,R26

  MUL R5,R7
  ADD R17,R0
  ADC R18,R1
  ADC R19,R26


  MOVW R20,R26
  MUL R4,R9
  ADD R18,R0
  ADC R19,R1
  ADC R20,R26

  MUL R5,R8
  ADD R18,R0
  ADC R19,R1
  ADC R20,R26

  MUL R6,R7
  ADD R18,R0
  ADC R19,R1
  ADC R20,R26


  MUL R5,R9
  ADD R19,R0
  ADC R20,R1
  ADC R21,R26

  MUL R6,R8
  ADD R19,R0
  ADC R20,R1
  ADC R21,R26

  MOVW R22,R26
  MUL R6,R9
  ADD R20,R0
  ADC R21,R1
  ADC R22,R26

  MUL R7,R8
  ADD R20,R0
  ADC R21,R1
  ADC R22,R26


  MUL R7,R9
  ADD R21,R0
  ADC R22,R1
  ADC R23,R26

  CLR R24
  MUL R8,R9
  ADD R22,R0
  ADC R23,R1
  ADC R24,R26

  ROL R17
  ROL R18
  ROL R19
  ROL R20
  ROL R21
  ROL R22
  ROL R23
  ROL R24

  MUL R6,R6
  NEG R25
  ADD R0,R25
  ADC R1,R26
  MOVW R10,R0

  MUL R7,R7
  MOVW R12,R0
  
  MUL R8,R8
  MOVW R14,R0
 
  MUL R9,R9
  MOVW R2,R0

  ADD R17,R10
  ADC R18,R11
  ADC R19,R12
  ADC R20,R13
  ADC R21,R14
  ADC R22,R15
  ADC R23,R2
  ADC R24,R3

  ; Upper half of L in R17,R18,R19,R20,R21,R22,R23,R24
  
  ; ============ HIGH MULT + ACC ============

  LDD R2, Y+8
  LDD R3, Y+9
  LDD R4, Y+10
  LDD R5, Y+11
  LDD R6, Y+12
  LDD R7, Y+13
  LDD R8, Y+14
  LDD R9, Y+15

  MUL R2,R3
  MOVW R10,R0

  MOVW R12,R26
  MUL R2,R4
  ADD R11,R0
  ADC R12,R1


  MOVW R14,R26
  MUL R2,R5
  ADD R12,R0
  ADC R13,R1

  MUL R3,R4
  ADD R12,R0
  ADC R13,R1
  ADC R14,R26


  MUL R2,R6
  ADD R13,R0
  ADC R14,R1

  MUL R3,R5
  ADD R13,R0
  ADC R14,R1
  ADC R15,R26


  MOV R16,R26
  MUL R2,R7
  ADD R14,R0
  ADC R15,R1
  ADC R16,R26

  MUL R3,R6
  ADD R14,R0
  ADC R15,R1
  ADC R16,R26

  MUL R4,R5
  ADD R14,R0
  ADC R15,R1
  ADC R16,R26


  MUL R2,R8
  ADD R15,R0
  ADC R16,R1
  ADC R26,R27

  MUL R3,R7
  ADD R15,R0
  ADC R16,R1
  ADC R26,R27

  MUL R4,R6
  ADD R15,R0
  ADC R16,R1
  ADC R26,R27


  MUL R2,R9
  ADD R16,R0
  ADC R26,R1
  SBC R27,R27

  MUL R3,R8
  ADD R16,R0
  ADC R26,R1
  SBCI R27,0

  MUL R4,R7
  ADD R16,R0
  ADC R26,R1
  SBCI R27,0

  MUL R5,R6
  ADD R16,R0
  ADC R26,R1
  SBCI R27,0
  NEG R27

  LSL R10
  ROL R11
  ROL R12
  ROL R13
  ROL R14
  ROL R15
  ROL R16
  SBC R25,R25 ; remember shift carry

  ADD R10,R18
  ADC R11,R19
  ADC R12,R20
  ADC R13,R21
  ADC R14,R22
  ADC R15,R23
  ADC R16,R24
  SBCI R25,0 ; merge carry with previous carry

  MUL R2,R2
  MOVW R18,R0
  MUL R3,R3
  MOVW R20,R0
  MUL R4,R4
  MOVW R22,R0
  MUL R5,R5

  ADD R18,R17
  STD Z+16,R18
  ADC R10,R19
  STD Z+17,R10
  ADC R11,R20
  STD Z+18,R11
  ADC R12,R21
  STD Z+19,R12
  ADC R13,R22
  STD Z+20,R13
  ADC R14,R23
  STD Z+21,R14
  ADC R15,R0
  STD Z+22,R15
  ADC R16,R1
  STD Z+23,R16

  SBCI R25,0 ; merge carry with previous carry

  CLR R17
  CLR R19
  MUL R3,R9
  ADD R26,R0
  ADC R27,R1
  ADC R19,R17

  MUL R4,R8
  ADD R26,R0
  ADC R27,R1
  ADC R19,R17

  MUL R5,R7
  ADD R26,R0
  ADC R27,R1
  ADC R19,R17


  MOV R20,R17
  MUL R4,R9
  ADD R27,R0
  ADC R19,R1
  ADC R20,R17

  MUL R5,R8
  ADD R27,R0
  ADC R19,R1
  ADC R20,R17

  MUL R6,R7
  ADD R27,R0
  ADC R19,R1
  ADC R20,R17


  MOV R21,R17
  MUL R5,R9
  ADD R19,R0
  ADC R20,R1
  ADC R21,R17

  MUL R6,R8
  ADD R19,R0
  ADC R20,R1
  ADC R21,R17

  MOV R22,R17
  MUL R6,R9
  ADD R20,R0
  ADC R21,R1
  ADC R22,R17

  MUL R7,R8
  ADD R20,R0
  ADC R21,R1
  ADC R22,R17

  MOV R23,R17
  MUL R7,R9
  ADD R21,R0
  ADC R22,R1
  ADC R23,R17

  CLR R24
  MUL R8,R9
  ADD R22,R0
  ADC R23,R1
  ADC R24,R17

  ROL R26
  ROL R27
  ROL R19
  ROL R20
  ROL R21
  ROL R22
  ROL R23
  ROL R24

  MUL R6,R6
  NEG R25
  ADD R0,R25
  ADC R1,R17
  MOVW R10,R0

  MUL R7,R7
  MOVW R12,R0
  
  MUL R8,R8
  MOVW R14,R0
 
  MUL R9,R9

  ADD R26,R10
  STD Z+24,R26
  ADC R27,R11
  STD Z+25,R27
  ADC R19,R12
  STD Z+26,R19
  ADC R20,R13
  STD Z+27,R20
  ADC R21,R14
  STD Z+28,R21
  ADC R22,R15
  STD Z+29,R22
  ADC R23,R0
  STD Z+30,R23
  ADC R24,R1
  STD Z+31,R24

  ; Compute inputs to middle diamond

  LDD R10, Y+0
  LDD R11, Y+1
  LDD R12, Y+2
  LDD R13, Y+3
  LDD R14, Y+4
  LDD R15, Y+5
  LDD R16, Y+6
  LDD R17, Y+7

  SUB R2,R10
  SBC R3,R11
  SBC R4,R12
  SBC R5,R13
  SBC R6,R14
  SBC R7,R15
  SBC R8,R16
  SBC R9,R17

  CLR R27
  SBC R26,R26
  EOR R2,R26
  EOR R3,R26
  EOR R4,R26
  EOR R5,R26
  EOR R6,R26
  EOR R7,R26
  EOR R8,R26
  EOR R9,R26

  NEG R26
  ADD R2,R26
  ADC R3,R27
  ADC R4,R27
  ADC R5,R27
  ADC R6,R27
  ADC R7,R27
  ADC R8,R27
  ADC R9,R27
  CLR R26

  ; ============ MIDDLE MULT ============

  MUL R2,R3
  MOVW R10,R0

  MOVW R12,R26
  MUL R2,R4
  ADD R11,R0
  ADC R12,R1


  MOVW R14,R26
  MUL R2,R5
  ADD R12,R0
  ADC R13,R1

  MUL R3,R4
  ADD R12,R0
  ADC R13,R1
  ADC R14,R26


  MUL R2,R6
  ADD R13,R0
  ADC R14,R1

  MUL R3,R5
  ADD R13,R0
  ADC R14,R1
  ADC R15,R26


  MOVW R16,R26
  MUL R2,R7
  ADD R14,R0
  ADC R15,R1
  ADC R16,R26

  MUL R3,R6
  ADD R14,R0
  ADC R15,R1
  ADC R16,R26

  MUL R4,R5
  ADD R14,R0
  ADC R15,R1
  ADC R16,R26


  MUL R2,R8
  ADD R15,R0
  ADC R16,R1
  ADC R17,R26

  MUL R3,R7
  ADD R15,R0
  ADC R16,R1
  ADC R17,R26

  MUL R4,R6
  ADD R15,R0
  ADC R16,R1
  ADC R17,R26

  MOVW R18,R26
  MUL R2,R9
  ADD R16,R0
  ADC R17,R1
  ADC R18,R26

  MUL R3,R8
  ADD R16,R0
  ADC R17,R1
  ADC R18,R26

  MUL R4,R7
  ADD R16,R0
  ADC R17,R1
  ADC R18,R26

  MUL R5,R6
  ADD R16,R0
  ADC R17,R1
  ADC R18,R26
  

  ROL R10
  ROL R11
  ROL R12
  ROL R13
  ROL R14
  ROL R15
  ROL R16
  SBC R25,R25 ; remember shift carry

  MUL R2,R2
  MOVW R28,R0
  MUL R3,R3
  MOVW R20,R0
  MUL R4,R4
  MOVW R22,R0
  MUL R5,R5

  ADD R10,R29
  ADC R11,R20
  ADC R12,R21
  ADC R13,R22
  ADC R14,R23
  ADC R15,R0
  ADC R16,R1

  SBC R25,R26 ; merge carry with previous carry

  MUL R3,R9
  ADD R17,R0
  ADC R18,R1
  ADC R19,R26

  MUL R4,R8
  ADD R17,R0
  ADC R18,R1
  ADC R19,R26

  MUL R5,R7
  ADD R17,R0
  ADC R18,R1
  ADC R19,R26


  MOVW R20,R26
  MUL R4,R9
  ADD R18,R0
  ADC R19,R1
  ADC R20,R26

  MUL R5,R8
  ADD R18,R0
  ADC R19,R1
  ADC R20,R26

  MUL R6,R7
  ADD R18,R0
  ADC R19,R1
  ADC R20,R26


  MUL R5,R9
  ADD R19,R0
  ADC R20,R1
  ADC R21,R26

  MUL R6,R8
  ADD R19,R0
  ADC R20,R1
  ADC R21,R26

  MOVW R22,R26
  MUL R6,R9
  ADD R20,R0
  ADC R21,R1
  ADC R22,R26

  MUL R7,R8
  ADD R20,R0
  ADC R21,R1
  ADC R22,R26


  MUL R7,R9
  ADD R21,R0
  ADC R22,R1
  ADC R23,R26

  CLR R24
  MUL R8,R9
  ADD R22,R0
  ADC R23,R1
  ADC R24,R26

  ROL R17
  ROL R18
  ROL R19
  ROL R20
  ROL R21
  ROL R22
  ROL R23
  ROL R24

  MUL R6,R6
  NEG R25
  ADD R0,R25
  ADC R1,R26
  MOVW R2,R0

  MUL R7,R7
  MOVW R4,R0
  
  MUL R8,R8
  MOVW R6,R0
 
  MUL R9,R9

  ADD R17,R2
  ADC R18,R3
  ADC R19,R4
  ADC R20,R5
  ADC R21,R6
  ADC R22,R7
  ADC R23,R0
  ADC R24,R1
  
  ; M in R28,R10,...,R24

  LDD R2,Z+16
  LDD R3,Z+17
  LDD R4,Z+18
  LDD R5,Z+19
  LDD R6,Z+20
  LDD R7,Z+21
  LDD R8,Z+22
  LDD R9,Z+23

  SUB R28,R2
  SBC R10,R3
  SBC R11,R4
  SBC R12,R5
  SBC R13,R6
  SBC R14,R7
  SBC R15,R8
  SBC R16,R9
  SBC R0,R0 ; remember borrow, needs to be *added* to R2 later

  LDD R29, Z+0
  SUB R29, R28
  STD Z+8,R29
  LDD R29, Z+1
  SBC R29, R10
  STD Z+9,R29
  LDD R29, Z+2
  SBC R29, R11
  STD Z+10,R29
  LDD R29, Z+3
  SBC R29, R12
  STD Z+11,R29
  LDD R29, Z+4
  SBC R29, R13
  STD Z+12,R29
  LDD R29, Z+5
  SBC R29, R14
  STD Z+13,R29
  LDD R29, Z+6
  SBC R29, R15
  STD Z+14,R29
  LDD R29, Z+7
  SBC R29, R16
  STD Z+15,R29
  
  SBC R2,R17
  SBC R3,R18
  SBC R4,R19
  SBC R5,R20
  SBC R6,R21
  SBC R7,R22
  SBC R8,R23
  SBC R9,R24

  ; Temp result in R28,R10,R11,...R16,R2,...,R9

  SBC R26,R26 ; remember borrow

  LDD R10,Z+24
  LDD R11,Z+25
  LDD R12,Z+26
  LDD R13,Z+27
  LDD R14,Z+28
  LDD R15,Z+29
  LDD R16,Z+30
  LDD R17,Z+31

  ADD R0,R0 ; recover carry

  ADC R2,R10
  ADC R3,R11
  ADC R4,R12
  ADC R5,R13
  ADC R6,R14
  ADC R7,R15
  ADC R8,R16
  ADC R9,R17
  
  STD Z+16,R2
  STD Z+17,R3
  STD Z+18,R4
  STD Z+19,R5
  STD Z+20,R6
  STD Z+21,R7
  STD Z+22,R8
  STD Z+23,R9

  CLR R18
  ADC R26,R18
  MOV R27,R26
  ASR R27

  ADD R10,R26
  ADC R11,R27
  ADC R12,R27
  ADC R13,R27
  ADC R14,R27
  ADC R15,R27
  ADC R16,R27
  ADC R17,R27

  STD Z+24,R10
  STD Z+25,R11
  STD Z+26,R12
  STD Z+27,R13
  STD Z+28,R14
  STD Z+29,R15
  STD Z+30,R16
  STD Z+31,R17

  ; restore X and Y register
  POP R29
  POP R28
  
#if defined (__FAST__)
  .ENDM
#else
  RET
#endif




; ===================================================================

; operand a: r23:r22
; operand r: r25:r24
bigint_square256:
  PUSH R2
  PUSH R3
  PUSH R4
  PUSH R5
  PUSH R6
  PUSH R7
  PUSH R8
  PUSH R9
  PUSH R10
  PUSH R11
  PUSH R12
  PUSH R13
  PUSH R14
  PUSH R15
  PUSH R16
  PUSH R17
  PUSH R28
  PUSH R29

  MOVW R30, R24
  MOVW R28, R22

  ;--- level 1: compute L ---
  LDD R2, Y+0
  LDD R3, Y+1
  LDD R4, Y+2
  LDD R5, Y+3
  LDD R6, Y+4
  LDD R7, Y+5
  LDD R8, Y+6
  LDD R9, Y+7
  CALLSQR128

  ;--- level 1: compute H ---
  ADIW R28, 16
  ADIW R30, 32
  LDD R2, Y+0
  LDD R3, Y+1
  LDD R4, Y+2
  LDD R5, Y+3
  LDD R6, Y+4
  LDD R7, Y+5
  LDD R8, Y+6
  LDD R9, Y+7
  CALLSQR128
  SBIW R28, 16
  SBIW R30, 32

  ;HIGH(H) in R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15,R16,R17

  ;--- level 1: HIGH(L)+LOW(H) ---
  LDD R0, Z+16
  LDD R1, Z+32
  ADD R0, R1
  STD Z+32, R0
  LDD R0, Z+17
  LDD R1, Z+33
  ADC R0, R1
  STD Z+33, R0
  LDD R0, Z+18
  LDD R1, Z+34
  ADC R0, R1
  STD Z+34, R0
  LDD R0, Z+19
  LDD R1, Z+35
  ADC R0, R1
  STD Z+35, R0
  LDD R0, Z+20
  LDD R1, Z+36
  ADC R0, R1
  STD Z+36, R0
  LDD R0, Z+21
  LDD R1, Z+37
  ADC R0, R1
  STD Z+37, R0
  LDD R0, Z+22
  LDD R1, Z+38
  ADC R0, R1
  STD Z+38, R0
  LDD R0, Z+23
  LDD R1, Z+39
  ADC R0, R1
  STD Z+39, R0
  LDD R0, Z+24
  LDD R1, Z+40
  ADC R0, R1
  STD Z+40, R0
  LDD R0, Z+25
  LDD R1, Z+41
  ADC R0, R1
  STD Z+41, R0
  LDD R0, Z+26
  LDD R1, Z+42
  ADC R0, R1
  STD Z+42, R0
  LDD R0, Z+27
  LDD R1, Z+43
  ADC R0, R1
  STD Z+43, R0
  LDD R0, Z+28
  LDD R1, Z+44
  ADC R0, R1
  STD Z+44, R0
  LDD R0, Z+29
  LDD R1, Z+45
  ADC R0, R1
  STD Z+45, R0
  LDD R0, Z+30
  LDD R1, Z+46
  ADC R0, R1
  STD Z+46, R0
  LDD R0, Z+31
  LDD R1, Z+47
  ADC R0, R1
  STD Z+47, R0
  ;propagate carry to end
  CLR R0
  ADC R2, R0
  STD Z+48, R2
  ADC R3, R0
  STD Z+49, R3
  ADC R4, R0
  STD Z+50, R4
  ADC R5, R0
  STD Z+51, R5
  ADC R6, R0
  STD Z+52, R6
  ADC R7, R0
  STD Z+53, R7
  ADC R8, R0
  STD Z+54, R8
  ADC R9, R0
  STD Z+55, R9
  ADC R10, R0
  STD Z+56, R10
  ADC R11, R0
  STD Z+57, R11
  ADC R12, R0
  STD Z+58, R12
  ADC R13, R0
  STD Z+59, R13
  ADC R14, R0
  STD Z+60, R14
  ADC R15, R0
  STD Z+61, R15
  ADC R16, R0
  STD Z+62, R16
  ADC R17, R0
  STD Z+63, R17

  ;--- level 1: subtract a0-a15 ---
  LDD R2, Y+0
  LDD R3, Y+1
  LDD R4, Y+2
  LDD R5, Y+3
  LDD R6, Y+4
  LDD R7, Y+5
  LDD R8, Y+6
  LDD R9, Y+7
  LDD R10, Y+8
  LDD R11, Y+9
  LDD R12, Y+10
  LDD R13, Y+11
  LDD R14, Y+12
  LDD R15, Y+13
  LDD R16, Y+14
  LDD R17, Y+15

  LDD R0, Y+16
  SUB R2, R0
  LDD R0, Y+17
  SBC R3, R0
  LDD R0, Y+18
  SBC R4, R0
  LDD R0, Y+19
  SBC R5, R0
  LDD R0, Y+20
  SBC R6, R0
  LDD R0, Y+21
  SBC R7, R0
  LDD R0, Y+22
  SBC R8, R0
  LDD R0, Y+23
  SBC R9, R0  
  LDD R0, Y+24
  SBC R10, R0
  LDD R0, Y+25
  SBC R11, R0
  LDD R0, Y+26
  SBC R12, R0
  LDD R0, Y+27
  SBC R13, R0
  LDD R0, Y+28
  SBC R14, R0
  LDD R0, Y+29
  SBC R15, R0
  LDD R0, Y+30
  SBC R16, R0
  LDD R0, Y+31
  SBC R17, R0
  ; store borrow in R0
  SBC R0, R0

  ;--- level 1: absolute values ---
  EOR R2, R0
  EOR R3, R0
  EOR R4, R0
  EOR R5, R0
  EOR R6, R0
  EOR R7, R0
  EOR R8, R0
  EOR R9, R0
  EOR R10, R0
  EOR R11, R0
  EOR R12, R0
  EOR R13, R0
  EOR R14, R0
  EOR R15, R0
  EOR R16, R0
  EOR R17, R0
  NEG R0
  CLR R22
  ADD R2, R0
  ADC R3, R22
  ADC R4, R22
  ADC R5, R22
  ADC R6, R22
  ADC R7, R22
  ADC R8, R22
  ADC R9, R22
  ADC R10, R22
  ADC R11, R22
  ADC R12, R22
  ADC R13, R22
  ADC R14, R22
  ADC R15, R22
  ADC R16, R22
  ADC R17, R22
  
  ;--- level 1: write absolute values to temp ---
  MOVW R28, R30
  ADIW R28, 16
  STD Y+0, R2
  STD Y+1, R3
  STD Y+2, R4
  STD Y+3, R5
  STD Y+4, R6
  STD Y+5, R7
  STD Y+6, R8
  STD Y+7, R9
  STD Y+8, R10
  STD Y+9, R11
  STD Y+10, R12
  STD Y+11, R13
  STD Y+12, R14
  STD Y+13, R15
  STD Y+14, R16
  STD Y+15, R17

  ;load stack pointer
  IN R30, 0x3D
  IN R31, 0x3E
  SBIW R30, 32
  IN R0, 0x3F
  CLI
  OUT 0x3E, R31
  OUT 0x3F, R0
  OUT 0x3D, R30
  ADIW R30, 1

  ;--- level 1: compute M ---
  CALLSQR128

  ;restore address of result in Y
  SBIW R28, 16

  ;--- level 1: combine L, H, and M ---
  LDD R0, Y+0
  LDD R1, Y+1
  LDD R2, Y+2
  LDD R3, Y+3
  LDD R4, Y+4
  LDD R5, Y+5
  LDD R6, Y+6
  LDD R7, Y+7
  LDD R8, Y+8
  LDD R9, Y+9
  LDD R10, Y+10
  LDD R11, Y+11
  LDD R12, Y+12
  LDD R13, Y+13
  LDD R14, Y+14
  LDD R15, Y+15

  ;subtract M
  LDD R16, Z+0
  SUB R0, R16
  LDD R16, Z+1
  SBC R1, R16
  LDD R16, Z+2
  SBC R2, R16
  LDD R16, Z+3
  SBC R3, R16
  LDD R16, Z+4
  SBC R4, R16
  LDD R16, Z+5
  SBC R5, R16
  LDD R16, Z+6
  SBC R6, R16
  LDD R16, Z+7
  SBC R7, R16
  LDD R16, Z+8
  SBC R8, R16
  LDD R16, Z+9
  SBC R9, R16
  LDD R16, Z+10
  SBC R10, R16
  LDD R16, Z+11
  SBC R11, R16
  LDD R16, Z+12
  SBC R12, R16
  LDD R16, Z+13
  SBC R13, R16
  LDD R16, Z+14
  SBC R14, R16
  LDD R16, Z+15
  SBC R15, R16
  ; store borrow in R16
  SBC R16, R16

  LDD R17, Y+32
  ADD R0, R17
  STD Y+16, R0
  LDD R0, Y+33
  ADC R1, R0
  STD Y+17, R1
  LDD R1, Y+34
  ADC R2, R1
  STD Y+18, R2
  LDD R2, Y+35
  ADC R3, R2
  STD Y+19, R3
  LDD R3, Y+36
  ADC R4, R3
  STD Y+20, R4
  LDD R4, Y+37
  ADC R5, R4
  STD Y+21, R5
  LDD R5, Y+38
  ADC R6, R5
  STD Y+22, R6
  LDD R6, Y+39
  ADC R7, R6
  STD Y+23, R7
  LDD R7, Y+40
  ADC R8, R7
  STD Y+24, R8
  LDD R8, Y+41
  ADC R9, R8
  STD Y+25, R9
  LDD R9, Y+42
  ADC R10, R9
  STD Y+26, R10
  LDD R10, Y+43
  ADC R11, R10
  STD Y+27, R11
  LDD R11, Y+44
  ADC R12, R11
  STD Y+28, R12
  LDD R12, Y+45
  ADC R13, R12
  STD Y+29, R13
  LDD R13, Y+46
  ADC R14, R13
  STD Y+30, R14
  LDD R14, Y+47
  ADC R15, R14
  STD Y+31, R15
  ; store carry in R18
  CLR R18
  ADC R18, R18

  ;subtract M
  LSR R16
  LDD R16, Z+16
  SBC R17, R16
  LDD R16, Z+17
  SBC R0, R16
  LDD R16, Z+18
  SBC R1, R16
  LDD R16, Z+19
  SBC R2, R16
  LDD R16, Z+20
  SBC R3, R16
  LDD R16, Z+21
  SBC R4, R16
  LDD R16, Z+22
  SBC R5, R16
  LDD R16, Z+23
  SBC R6, R16
  LDD R16, Z+24
  SBC R7, R16
  LDD R16, Z+25
  SBC R8, R16
  LDD R16, Z+26
  SBC R9, R16
  LDD R16, Z+27
  SBC R10, R16
  LDD R16, Z+28
  SBC R11, R16
  LDD R16, Z+29
  SBC R12, R16
  LDD R16, Z+30
  SBC R13, R16
  LDD R16, Z+31
  SBC R14, R16
  ; store borrow in R27:R26
  SBC R26, R26
  SBC R27, R27

  LSR R18
  LDD R19, Y+48
  ADC R17, R19
  STD Y+32, R17
  LDD R17, Y+49
  ADC R0, R17
  STD Y+33, R0
  LDD R0, Y+50
  ADC R1, R0
  STD Y+34, R1
  LDD R1, Y+51
  ADC R2, R1
  STD Y+35, R2
  LDD R2, Y+52
  ADC R3, R2
  STD Y+36, R3
  LDD R3, Y+53
  ADC R4, R3
  STD Y+37, R4
  LDD R4, Y+54
  ADC R5, R4
  STD Y+38, R5
  LDD R5, Y+55
  ADC R6, R5
  STD Y+39, R6
  LDD R6, Y+56
  ADC R7, R6
  STD Y+40, R7
  LDD R7, Y+57
  ADC R8, R7
  STD Y+41, R8
  LDD R8, Y+58
  ADC R9, R8
  STD Y+42, R9
  LDD R9, Y+59
  ADC R10, R9
  STD Y+43, R10
  LDD R10, Y+60
  ADC R11, R10
  STD Y+44, R11
  LDD R11, Y+61
  ADC R12, R11
  STD Y+45, R12
  LDD R12, Y+62
  ADC R13, R12
  STD Y+46, R13
  LDD R13, Y+63
  ADC R14, R13
  STD Y+47, R14 
  ; store carry in R1
  ADC R26, R18
  ADC R27, R18

  ;--- propagate carry to end ---
  ADD R19, R26
  ADC R17, R27
  ADC R0, R27
  ADC R1, R27
  ADC R2, R27
  ADC R3, R27
  ADC R4, R27
  ADC R5, R27
  ADC R6, R27
  ADC R7, R27
  ADC R8, R27
  ADC R9, R27
  ADC R10, R27
  ADC R11, R27
  ADC R12, R27
  ADC R13, R27
  
  STD Y+48, R19
  STD Y+49, R17
  STD Y+50, R0
  STD Y+51, R1
  STD Y+52, R2
  STD Y+53, R3
  STD Y+54, R4
  STD Y+55, R5
  STD Y+56, R6
  STD Y+57, R7
  STD Y+58, R8
  STD Y+59, R9
  STD Y+60, R10
  STD Y+61, R11
  STD Y+62, R12
  STD Y+63, R13

  ADIW R30, 31
  IN R1, 0x3F
  CLI
  OUT 0x3E, R31
  OUT 0x3F, R1
  OUT 0x3D, R30

  CLR R1
  POP R29
  POP R28
  POP R17
  POP R16
  POP R15
  POP R14
  POP R13
  POP R12
  POP R11
  POP R10
  POP R9
  POP R8
  POP R7
  POP R6
  POP R5
  POP R4
  POP R3
  POP R2
  RET
